<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="bitcamp.java77.dao.MainDao">

	<resultMap type="wish" id="wishMap">
		<id column="wno" property="no" />
		<result column="FPATH" property="path" />
		<result column="CONT" property="content" />
	</resultMap> 
	
	<!-- 위시부분 -->
	<select id="selectList" resultMap="wishMap" parameterType="map">
<!-- 		select wno, fpath, title, cont, price, url, buy, tag, date, cno, uno -->
<!-- 		  from wish -->
		select DISTINCT wish.*, user.name as userName, user.pho as userPho, category.name as categoryName, 
						(select count(*) from `like` where `like`.wno = wish.wno ) as numOflNo
		  from wish, user, category, `like`
		 where wish.uno=user.uno=category.uno
		 group by wish.wno
		 order by
		<choose>
			<when test="keyword == 'title'">title </when>
			<when test="keyword == 'price'">price </when>
			<otherwise>wno desc</otherwise>
		</choose>
		limit #{startIndex}, #{length}
	</select>
	
	<!-- 친구페이지 리스트불러오기 -->
	<select id="selectFriendList" resultMap="wishMap" parameterType="map">
		select wish.*, user.name as userName, user.pho as userPho, category.name as categoryName
		  from wish, user, category
		 where wish.uno=user.uno=category.uno and wish.uno=#{fNo}
		 group by wish.wno
		 order by
		<choose>
			<when test="keyword == 'title'">title </when>
			<when test="keyword == 'price'">price </when>
			<otherwise>wno desc</otherwise>
		</choose>
		limit #{startIndex}, #{length}
	</select>
	
	<select id="selectUserList" resultMap="wishMap" parameterType="map">
		select wno, fpath, title, cont, price, url, buy, tag, date, cno, uno
		from wish
		where uno=#{uno}
		order by wno desc
		limit #{startIndex}, #{length}
		
<!-- 		select wish.*, user.name as userName, user.pho as userPho, category.name as categoryName -->
<!-- 		  from wish, user, category -->
<!-- 		 where wish.uno=user.uno=category.uno=#{uno} -->
<!-- 		 order by wno desc -->
	
	
<!-- 		select wish.*, user.name as userName, user.pho as userPho, category.name as categoryName -->
<!-- 		  from wish, user, category -->
<!-- 		 where wish.uno=user.uno=category.uno=#{uno} -->
<!-- 		 where wish.uno=user.uno=category.uno -->
<!--          order by -->
<!-- 		<choose> -->
<!-- 			<when test="keyword == 'title'">title </when> -->
<!-- 			<when test="keyword == 'price'">price </when> -->
<!-- 			<otherwise>wno desc</otherwise> -->
<!-- 		</choose> -->
<!-- 		limit #{startIndex}, #{length} -->
	</select>

	<select id="selectNo" resultType="int">
		select max(wno) from wish
	</select>

	<select id="selectOne" resultMap="wishMap" parameterType="int">
<!-- 		select wno, fpath, title, cont, price, url, buy, tag, date, cno, uno -->
<!-- 		  from wish -->
<!-- 		 where wno=#{no} -->
<!-- 		   and wish.uno=user.uno=category.uno -->
		select wish.*, user.name as userName, user.pho as userPho, category.name as categoryName
		  from wish, user, category
		 where wno=#{no}
           and wish.uno=user.uno=category.uno
         group by wish.wno
	</select>
	
	<!-- 좋아요 -->
	<insert id="addLike" parameterType="map">
		insert into `like`(wno, uno) 
		values(#{wno}, #{uno})
		<selectKey keyProperty="lno" order="AFTER" resultType="int">
	      select count(*) as numOflNo from `like` where wno=#{wno}
	    </selectKey>
	</insert>
	
	<delete id="deleteLike" parameterType="map">
		delete
		  from `like`
		 where wno=#{wno} and uno=#{uno}
	</delete>

	<select id="selectlikeList" resultType="int" parameterType="int">
		select wno
		  from `like`
		 where uno=#{uno}
	</select>
	
	
	<!-- 담아가기 -->
	<insert id="send" parameterType="map">
		insert into SEND(wno, uno) 
		values(#{wno}, #{uno})
	</insert>
	
	<insert id="copyItem" parameterType="int">
		<selectKey keyProperty="cno" order="BEFORE" resultType="int">
	      select min(cno) from category where uno=#{uno}
	    </selectKey>
		insert into wish( fpath, title, cont, price, url, tag, cno, uno) 
		select w1.fpath, w1.title, w1.cont, w1.price, w1.url, w1.tag, cno, #{uno}
		  from wish w1
		 where wno=#{wno}
	</insert>
	
	<select id="selectsendList" resultType="int" parameterType="int">
		select wno
		  from `SEND`
		 where uno=#{uno}
	</select>
	
	
	<!-- 팔로워 -->
	<insert id="follower" parameterType="map">
		insert into follower(uno, uno2) 
		values(#{toUser}, #{fromUser})
	</insert>

	<select id="followerCheck" resultType="int" parameterType="map">
		select count(*)
		  from follower
		 where uno=#{uno} and uno2=#{wishUserNo}
	</select>
	
	<delete id="unfollower" parameterType="map">
		delete
		  from follower
		 where uno=#{toUser} and uno2=#{fromUser}
	</delete>
	
	
	<!-- 코멘트 등록 -->
	<insert id="insertComment" parameterType="comment">
		insert into comment (wno, uno,cont) 
		values(#{wNo}, #{uNo},#{cont})
	</insert>
	
	<!-- 코멘트 삭제 -->
	<delete id="delComment" parameterType="comment">
		delete 
		from comment
		where cono = #{coNo}
	</delete>
	
	<!--  코멘트 리스트 -->
	<select id="selectComentList"  parameterType="int" resultType="comment">
		select cono,comment.wno,comment.uno,cont, user.pho as userPho, user.name as userName
		  from comment, user
		 where comment.wno=#{wNo} and comment.uno=user.uno
		 order by cono desc
	</select>
	
	
	
	
	<!-- 검색 게시글 불러오기(페이징) -->
	<select id="selectSearchList" resultMap="wishMap" parameterType="map">
		select wish.*, user.name as userName, user.pho as userPho, category.name as categoryName
		  from wish, user, category
		 where wish.uno=user.uno=category.uno and wish.tag like #{tag}
		 group by wish.wno
         order by
		<choose>
			<when test="keyword == 'title'">title </when>
			<when test="keyword == 'price'">price </when>
			<otherwise>wno desc</otherwise>
		</choose>
	</select>
	
</mapper>