<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="bitcamp.java77.dao.WishDao">

	<resultMap type="wish" id="wishMap">
		<id 	column="wno" 		property="no"/>
		<result column="FPATH" 		property="path"/>
		<result column="CONT" 	property="content"/>
	</resultMap>
	
   	<!-- 게시글 등록하기 -->
	<insert id="insert" parameterType="wish">
		insert into wish(fpath, title, cont, price, url, tag, cno, uno) 
		values(#{path}, #{title}, #{content}, #{price}, #{url}, #{tag}, #{cno}, #{uno})
	</insert>
	
	<!-- 팔로우 추가하기 -->
	<insert id="followInsert">
		insert into follower(uno, uno2) 
		values(#{uno}, #{fno})
	</insert>
	
	<!-- 유저의 디폴트카테고리 번호 반환 -->
	<select id="selectcNo" resultType="int">
		select min(cno) from category where uno=#{uno}
	</select>
  	
  	<!-- 게시글번호 불러오기  -->
	<select id="selectNo" resultType="int">
		select max(wno) from wish
	</select>
	
	
	
	<!-- 게시글 불러오기(페이징) -->
	<select id="selectList" resultMap="wishMap" parameterType="map">
		select wno, fpath, title, cont, price, url, buy, tag, date, cno, uno
		from wish
		where uno=#{uno}
		order by wno desc
		limit #{startIndex}, #{length}
	</select>
	
	<!-- 유저가 '좋아요'한 게시글 불러오기(페이징) -->
	<select id="selectLikeList" resultMap="wishMap" parameterType="map">
		select w.*, 
			  u.name as userName,
			  u.pho as userPho, 
			  c.name as categoryName,
			  (select count(*) from `like` l2 where l.wno=l2.wno) as numOflNo,
			  (select count(*) from send s where w.wno=s.wno and s.uno=#{loginUser}) as sendSts
		  from wish w, `like` l, user u, category c
		  where  w.wno=l.wno and l.uno=#{uno} and u.uno=w.uno=c.uno
		order by w.wno desc
		limit #{startIndex}, #{length}
	</select> 
	
	<!-- 유저정보 불러오기  -->
	<select id="selectUserInfo" resultType="join">
		select user.*, 
			  (select COUNT(*) from category where uno=#{uno}) caCnt,
			  (select COUNT(*) from wish where uno=#{uno}) wishCnt,
			  (select COUNT(*) from `like` where uno=#{uno}) likeCnt,
			  (select COUNT(*) from follower where uno2=#{uno}) fCnt,
			  (select COUNT(*) from follower where uno=#{uno}) fCnt2
		from user
		where uno=#{uno}
	</select>
	
	<!-- 유저의 팔로우 리스트 불러오기  -->
	<select id="selectFollowList" resultType="join" parameterType="map">
		select u.*, (select count(*) from follower f2 where f2.uno=#{uno} and f2.uno2=u.uno) as fSts
		from follower f, user u
		where f.uno=#{fno} and u.uno=f.uno2
		order by u.uno desc
	</select>
	
	<!-- 유저의 팔로워 리스트 불러오기  -->
	<select id="selectFollowerList" resultType="join" parameterType="map">
		select u.*, (select count(*) from follower f2 where f2.uno=#{uno} and f2.uno2=f.uno) as fSts
		from follower f, user u
		where f.uno2=#{fno} and u.uno=f.uno
		order by u.uno desc
	</select>
	
	
	
  	<!-- 게시글 삭제하기 -->
	<delete id="delete">
		delete from wish where wno=#{no}
	</delete>
	
  	<!-- 게시글 좋아요 삭제하기 -->
	<delete id="deleteLike">
		delete from `like` where wno=#{no}
	</delete>
	
  	<!-- 게시글 담아가기 내역 삭제하기 (담아가기 테이블에서만 삭제됨, 담아가기 한 유저의 테이블에는 게시글이 남아있음) -->
	<delete id="deleteSend">
		delete from send where wno=#{no}
	</delete>
  
  	<!-- 팔로우 삭제하기 -->
	<delete id="followDelete">
		delete from follower where uno=#{uno} and uno2=#{fno}
	</delete>
	
	
  
  	<!-- 게시글 수정하기 -->
	<update id="update" parameterType="wish">
		update wish 
		set fpath=#{path}, title=#{title}, cont=#{content}, price=#{price}, url=#{url}, tag=#{tag}, date=now()  	  
	    where wno=#{no}
	</update>
	
	<!-- 게시글 상세내용 불러오기 -->
	<select id="selectOne" resultMap="wishMap" parameterType="int">
		select wno, fpath, title, cont, price, url, buy, tag, date, cno from wish where wno=#{no}
	</select>
	
	<!-- 구매여부 업데이트하기 -->
	<update id="updateBuy" parameterType="wish">
		update wish 
		set buy=#{buy}
	    where wno=#{no}
	</update>
	
	<!-- 게시물 카테고리 수정하기 -->
	<update id="updateWishCategory" parameterType="wish">
		update wish 
		set cno=#{cno}
	    where wno=#{no}
	</update>
  
</mapper>






